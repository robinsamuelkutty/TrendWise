The error you're getting from the **Gemini API**:

```
[404 Not Found] models/gemini-pro is not found for API version v1beta, or is not supported for generateContent.
```

### üîç Root Cause:

You're calling `model: "gemini-pro"` using **API version `v1beta`**, but that model:

* Either **doesn't exist under that version**
* Or is **not supported for `generateContent`**
* Or your **API key doesn't have access to it**

---

### ‚úÖ How to Fix:

#### 1. üîÑ **Use Correct API Version**

As of now, the `gemini-pro` model is available under **`v1`**, not `v1beta`.

**Update your code** from this:

```ts
const model = genAI.getGenerativeModel({ model: 'gemini-pro' }); // Wrong if you're using v1beta
```

To this:

```ts
const model = genAI.getGenerativeModel({ model: 'models/gemini-pro' }); // for v1
```

Also make sure your client is initialized using `v1`:

```ts
import { GoogleGenerativeAI } from '@google/generative-ai';

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY, {
  apiVersion: 'v1', // <-- explicitly set or default to latest
});
```

---

#### 2. üß™ **List Available Models**

You can verify which models you have access to:

```ts
const models = await genAI.listModels();
console.log(models);
```

This will help confirm if `"models/gemini-pro"` is accessible to your API key.

---

#### 3. üîë **Ensure API Key Has Access**

Go to the [Google AI Studio](https://makersuite.google.com/app/apikey) and:

* Check if your **API key is enabled for Gemini**
* Ensure **billing is set up** if needed
* Make sure you're using the **production endpoint**, not MakerSuite-only keys

---

### ‚úÖ Final Working Sample (for `generateContent`):

```ts
import { GoogleGenerativeAI } from '@google/generative-ai';

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

export async function GET() {
  try {
    const model = genAI.getGenerativeModel({ model: 'models/gemini-pro' });

    const result = await model.generateContent({
      contents: [{ parts: [{ text: 'Write an SEO blog about Apple WWDC 2025' }] }],
    });

    const response = await result.response;
    const text = response.text();

    return new Response(JSON.stringify({ text }), { status: 200 });
  } catch (err) {
    console.error('Gemini test error:', err);
    return new Response(JSON.stringify({ error: 'Gemini failed' }), { status: 500 });
  }
}
```

Let me know if you want me to verify your API handler or write it fresh based on your project structure.
